---

- hosts: localhost

  tasks:

  # 1st task to be placed here is to read Org name, Project/Application name, other devops action details from UI (passed as --extra-vars to this playbook) where project/appname can be used as a PublicKey. Imp point here is this Playbook will be called from Python app.py API webmethod (say /startup) which will run azurelogin.sh script that will open the az login interactively on Browser and once user logs in then response from python subprocess will collect username, orgname and then render_html 2nd page that will take user inputs (like project/appname, what action they need to do etc.)  & autopopulates the orgname (captured in 1st subprocess call of azurelogin script). Once submit from 2nd page is done then This playbook will be called with orgname, project/appname etc as --extra-vars
  # This PublicKey will be used to search in Azure MySQL DB/Table=azureMappingVault as if it exists or not. 
  # If yes, then pull the associated ServicePrincipalName, ClientID, TenantID, ObjectID & Secret. For One project/appname = Only One ServicePrincipal ids & secret will be generated (by admin). 
  # If project/appname doesn't exist then send mail to genpact Admin user (in next task) asking to login to Onboarding OneUI & create/provision ServicePrincipals, Secrets for that project/appname/team that will trigger adminuser playbook which will save projectname/appname, SP, ClientID, ClientSecret, TenantID, ObjectID, OrgName, resourcegroupname in DB & Vault respectively. After snding mail from next task terminate the playbook using When condition & let user know to contact Admin user for onboarding formalities 
  # If projectname/appname was found in Azure DB, then pull the secrets, SP name etc. to login as SP for framework to proceed with DevOps OOB provisioning tasks. This can be done by calling remoteCall API that will take care of signing in as SP & thereafter trigger the DevOps tasks as per inputs by User taken or passed to this playbook as --extra-vars 


  - name: Framework is trying to login with ServicePrincipalName on behalf of the Customer
    shell: "echo az login --service-principal --username {{ clientID | default('') }} --password {{ clientSecret | default('') }} --tenant {{ tenantID | default('') }}"
    register: servicePrincipalLoginOut
  - debug: var=servicePrincipalLoginOut.stdout


  - name: Good to add Azure DevOps extension(or, upgrade if already added)
    shell: "az extension add --upgrade -n azure-devops"
    register: azureDevOpsExtOut
  - debug: var=azureDevOpsExtOut.stdout


  - name: Login to Azure DevOps using Org's PAT tokens
    shell: "echo -n {{ pat | default('') }} | az devops login --organization https://dev.azure.com/{{ devopsOrgName | default('') }}"
    register: azureDevOpsPATLoginOut
  - debug: var=azureDevOpsPATLoginOut.stdout

 
  #- name: Configure defaults to set the configuration for the organization and project
    #shell: "az devops project show --project {{ devopsProject | default('') }}"
    #register: azureDevOpsProjectCheckOut
  #- debug: var=azureDevOpsProjectCheckOut


  # To be run if output of above task is not "TF200016: The following project does not exist" in azureDevOpsProjectCheckOut.stdout variable
  - name: Creating DevOps project on Azure DevOps Server
    shell: "az devops project create --name {{ devopsProject | default('') }}"
    register: azureDevOpsProjectCreateOut
    #when: ("ERROR" in azureDevOpsProjectCheckOut.stderr)
  - debug: var=azureDevOpsProjectCreateOut.stdout

  - name: Configure defaults to set the configuration for the organization and project
    shell: "az devops configure --defaults organization=https://dev.azure.com/{{ devopsOrgName | default('') }} project={{ devopsProject | default('') }}"
    register: devopsConfigureOut
  - debug: var=devopsConfigureOut.stdout


  # To be run if devops action is to create a pipeline
  - name: Configure defaults to set the configuration for the organization and project
    shell: "export AZURE_DEVOPS_EXT_GITHUB_PAT=d73c4c3febbd2fa9a938515239b7b094cef4fa68a && az devops service-endpoint github create --github-url {{ Repository | default('') }} --name \"GitHubServiceConnection\" | grep -A 2 -i 'groupScopeId' | grep \"id\" |  sed 's/\"id\": //g' | sed 's/\"//g' | sed 's/,//g' | sed 's/^ *//g'"
    register: GitHubServiceConnectionIDOut
  - debug: var=GitHubServiceConnectionIDOut.stdout

 
  - set_fact: GitHubServiceConnectionIDGlobal = "{{ GitHubServiceConnectionIDOut.stdout }}"   
    register: GitHubServiceConnectionIDGlobal

  # To be triggered if Pipeline needs to be setup/created (for dotnetcore application)
  - name: Create the automated Azure DevOps pipeline by referencing the azure-pipelines.yml
    shell: "az pipelines create --name {{ devopsProject | default('') }}.CI --description 'Pipeline setup for the .Net project' --repository {{ Repository | default('') }} --branch master --yml-path azure-pipelines.yml --service-connection {{ GitHubServiceConnectionIDOut.stdout }}"
    register: createDotNetCorePipelineOut
    when: ( ProjectStack == "dotnetcore")
  - debug: var=createDotNetCorePipelineOut.stdout


  # To be triggered if Pipeline needs to be setup/created (for Java application)
  - name: Create the automated Azure DevOps pipeline by referencing the azure-pipelines.yml
    shell: "az pipelines create --name {{ devopsProject | default('') }}.CI --description 'Pipeline setup for the Java project' --repository {{ Repository | default('') }} --branch master --yml-path azure-pipelines.yml --service-connection {{ GitHubServiceConnectionIDOut.stdout }}"
    register: createJavaPipelineOut
    when: ( ProjectStack == "java")
  - debug: var=createJavaPipelineOut.stdout


  # To be triggered if Pipeline needs to be setup/created (for Python application)
  - name: Create the automated Azure DevOps pipeline by referencing the azure-pipelines.yml
    shell: "az pipelines create --name {{ devopsProject | default('') }}.CI --description 'Pipeline setup for the Python project' --repository {{ Repository | default('') }} --branch master --yml-path azure-pipelines.yml --service-connection {{ GitHubServiceConnectionIDOut.stdout }}"
    register: createPythonPipelineOut
    when: ( ProjectStack == "python")
  - debug: var=createPythonPipelineOut.stdout


  - name: Create Azure Boards with Work Item as task to configure associated Boards for changes tracking
    shell: "az boards work-item create --title 'Testing work item as task type' --type 'Task' --description 'Sample Description'  | grep 'url' | grep 'workItems' | sed 's/://g' | sed 's/url//g' | sed 's/\"//g' | sed 's/$ *//g'"
    register: createBoardsOut
  - debug: var=createBoardsOut.stdout
   